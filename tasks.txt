רשימת משימות סופית – מערכת ניהול (Admin + Backend)
שלב 1 – הכנה וסדר פרויקט

ארגון תיקיות

ליצור מבנה מסודר:

project/
  frontend/   ← הטפסים וה־Admin Dashboard
  backend/    ← שרת Node.js
    routes/
    models/
    services/
  package.json
  .env


יתרון: מ separation ברור בין frontend ל־backend, קל להתרחב.

עדכון package.json

להוסיף תלות: express, nodemailer, body-parser (או express.json), ו־sqlite3 או better-sqlite3.

להגדיר סקריפט start → node backend/server.js.

שלב 2 – בסיס Backend

שרת Express בסיסי

להקים backend/server.js.

להגדיר middleware express.json() לטיפול ב־POST.

להגדיר נתיב בדיקה GET /ping להבטחת שהשרת רץ.

מודול ניהול SMTP

ליצור backend/services/mailer.js.

להגדיר transporter של NodeMailer (נתוני התחברות ב־.env).

פונקציה sendMail(to, subject, body) שמחזירה Promise.

שלב 3 – אחסון נתונים

בחירת DB

לשימוש קל → SQLite (sqlite3).

יצירת קובץ backend/models/db.js שמתחבר ל־SQLite.

טבלאות דרושות

subscribers: id, name, email, phone, createdAt.

messages: id, title, body, type, createdAt.

אתחול DB

בקובץ db.js, לבדוק אם הטבלאות קיימות → אם לא, ליצור אותן.

שלב 4 – API לניהול נתונים

ניהול Subscribers

POST /api/subscribers – הוספת רשום חדש (ולידציה + מניעת כפילות לפי email).

GET /api/subscribers – החזרת כל הרשומים.

ניהול Messages

POST /api/messages – יצירת הודעה חדשה (type = "auto" או "manual").

GET /api/messages – החזרת כל ההודעות.

PUT /api/messages/:id – עדכון הודעה קיימת (למשל ההודעה האוטומטית).

שליחת הודעות מרובות

POST /api/broadcast – שולח הודעה לכולם.

לולאה על subscribers, קריאה ל־sendMail.

החזרת תוצאה עם מספר הצלחות/כשלונות.

שלב 5 – לוגיקה של שליחה אוטומטית

ברישום חדש

כשנכנס POST ל־/api/subscribers:

הוספה לטבלת subscribers.

שליפה של ההודעה האוטומטית (messages WHERE type="auto").

קריאה ל־sendMail למייל הנרשם.

שלב 6 – אבטחה

גישה ל־Admin בלבד

Middleware שמוודא סיסמת API פשוטה (כמו header Authorization).

אפשר להתחיל עם מפתח קבוע בקובץ .env.

יחול על כל /api/messages, /api/broadcast, /api/subscribers (GET) – לא על רישום חדש.

שלב 7 – חיבור ל־Frontend קיים

עדכון טופס באתר הקיים

לשנות את הקריאה מ־/api/sendMail ל־/api/subscribers.

לשלוח JSON { name, email, phone }.

להציג הודעת הצלחה/כישלון למשתמש.

ביטול NodeMailer ישיר

לא לשלוח ישירות מהמייל הישן → הכל עובר דרך ה־API החדש.

שלב 8 – Admin Dashboard (פשוט, לוגיקה בלבד)

צפייה ברשומים

דף שמבצע fetch ל־/api/subscribers ומציג רשימה.

ניהול הודעה אוטומטית

טופס שמבצע fetch ל־PUT /api/messages/:id.

שליחת Broadcast

טופס לטקסט → קריאה ל־/api/broadcast.

שלב 9 – בדיקות ואבטחת איכות

בדיקות זרימה

משתמש נרשם → נוסף ל־DB → מקבל מייל אוטומטי.

Admin נכנס → רואה רשומים + משנה הודעה אוטומטית + שולח Broadcast.

טיפול בשגיאות

בדיקת מייל לא חוקי → שרת מחזיר 400.

בדיקת כפילות מייל → החזרת הודעה מתאימה.

בדיקת כשל בשליחה → להציג ל־Admin כישלונות חלקיים.

תחזית באגים

אפשרי: כשלון שליחה באמצע Broadcast (SMTP נופל). → פתרון: try/catch + ספירת הצלחות/כשלונות.

אפשרי: גישה לא מורשית ל־API. → פתרון: middleware בדוק header בכל קריאה רלוונטית.

אפשרי: קריסה אם DB לא מאותחל. → פתרון: פונקציית init ב־startup.

✅ סיכום

הרשימה בנויה שלב-שלב:

סדר וארגון →

Backend בסיסי →

DB →

API →

לוגיקת שליחה →

אבטחה →

חיבור לפרונט הקיים →

דשבורד Admin →

בדיקות ותיקוני באגים.

רוצה שאמפה את זה עכשיו כ־תרשים זרימה של המערכת (משתמש → API → DB → מיילים → Admin)?